{"version":3,"sources":["components/ImageSelector.js","components/ProgressBar.js","components/ImageDisplay.js","components/ImageProcessor.js","App.js","reportWebVitals.js","index.js"],"names":["ImageSelector","onChange","fileInputRef","useRef","className","type","name","multiple","e","target","files","ref","ProgressBar","progress","total","filledWidth","style","width","ImageDisplay","image","src","blazefaceModel","bodyPixModel","ImageProcessor","images","canvasOne","canvasTwo","useState","setProgress","processedImages","setProcessedImages","downloadDisabled","setDownloadDisabled","currentImage","setCurrentImage","currentFace","setCurrentFace","useEffect","processImages","loadModels","a","console","log","blazeface","bodyPix","imageArray","Array","from","i","length","processImage","loadImage","Promise","resolve","reject","img","Image","onload","onerror","URL","createObjectURL","loadImageFromCanvas","canvas","toDataURL","canvasToBlob","toBlob","blob","predictFaces","predictedFaceDimensions","cropFace","current","croppedImage","segmentFace","backgroundFreeFace","split","oldImages","predictions","height","x","y","getContext","drawImage","estimateFaces","predictionDimensions","start","topLeft","end","bottomRight","size","startY","Math","max","startX","push","segmentPerson","map","data","ctx","getImageData","imgData","newImg","createImageData","newImgData","r","g","b","putImageData","disabled","onClick","zip","JSZip","file","generateAsync","then","saveAs","App","uploadedImages","setUploadedImages","hasImages","setHasImages","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30da658d.chunk.js","sourcesContent":["import React, {useRef} from 'react'\r\n\r\nimport \"../styles/components/image-selector.styles.scss\"\r\n/*\r\n\r\n    add drag an drop\r\n*/\r\n\r\nconst ImageSelector = ({onChange}) => {\r\n\r\n    const fileInputRef = useRef()\r\n\r\n    const preOnChange = (e) => {\r\n        // check if they are images\r\n        onChange(e.target.files)\r\n    }\r\n\r\n    return (\r\n        <label className=\"image-selector\">\r\n            <div>\r\n                Click to select images\r\n            </div>\r\n            <input type=\"file\" name=\"images\" multiple onChange={preOnChange} ref={fileInputRef}/>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default ImageSelector","import React from 'react'\r\n\r\n\r\nimport \"../styles/components/progress-bar.styles.scss\";\r\n\r\nconst ProgressBar = ({progress, total}) => {\r\n\r\n\r\n    const filledWidth = `calc(${(progress / total) * 100 }% - 4px)`;\r\n    \r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n\r\n            <div className=\"progress-bar__display\" style={{width: filledWidth}}></div>\r\n            <div className=\"progress-bar__numbers\">{progress}/{total}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar","import { image } from '@tensorflow/tfjs'\r\nimport React from 'react'\r\n\r\nimport \"../styles/components/image-display.styles.scss\"\r\n\r\nconst ImageDisplay = ({image}) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"image-display\">\r\n\r\n            <img src={image?.src} className=\"image-display__img\"/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageDisplay","import React, {useState, useEffect, useRef} from 'react'\r\nimport * as tfjs from '@tensorflow/tfjs';\r\nimport * as bodyPix from \"@tensorflow-models/body-pix\"\r\nimport * as blazeface from \"@tensorflow-models/blazeface\"\r\n\r\nimport * as tfjsWasm from '@tensorflow/tfjs-backend-wasm';\r\nimport '@tensorflow/tfjs-backend-webgl';\r\nimport '@tensorflow/tfjs-backend-cpu';\r\n\r\nimport ProgressBar from './ProgressBar'\r\nimport ImageDisplay from './ImageDisplay';\r\nimport \"../styles/components/image-processor.scss\";\r\nimport { saveAs } from 'file-saver';\r\nimport * as JSZip from \"jszip\"\r\n\r\n\r\nlet blazefaceModel = null;\r\nlet bodyPixModel = null;\r\n\r\nconst ImageProcessor = ({images}) => {\r\n\r\n    const canvasOne = useRef();\r\n    const canvasTwo = useRef();\r\n\r\n\r\n    const [progress, setProgress] = useState(0)\r\n    const [processedImages, setProcessedImages] = useState([])\r\n    const [downloadDisabled, setDownloadDisabled] = useState(true)\r\n\r\n\r\n    const [currentImage, setCurrentImage] = useState(null)\r\n    const [currentFace, setCurrentFace] = useState(null); \r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        \r\n        // reset\r\n        setProgress(0)\r\n        setProcessedImages([])\r\n        setDownloadDisabled(true)\r\n\r\n        // start image processing queue\r\n\r\n        processImages(images)\r\n    },[images])\r\n\r\n    const loadModels = async () => {\r\n        console.log(\"loading models...\")\r\n        if(!blazefaceModel) blazefaceModel = await blazeface.load();\r\n        if(!bodyPixModel) bodyPixModel = await bodyPix.load();\r\n    }\r\n\r\n    const onDownloadClick = () => {\r\n        if(processedImages && processedImages.length > 0){\r\n            var zip = new JSZip();\r\n            for(let i = 0; i < processedImages.length; i++){\r\n                zip.file(processedImages[i].name, processedImages[i]);\r\n            }\r\n\r\n            zip.generateAsync({\r\n                type: \"blob\"\r\n            }).then(function(blob) {\r\n                saveAs(blob, \"memefaces.zip\");\r\n            }); \r\n            console.log(processedImages)\r\n        }\r\n    }\r\n\r\n    const processImages = async (images) => {\r\n\r\n        // check if models are loaded\r\n\r\n        await loadModels()\r\n\r\n        console.log(\"processing images...\")\r\n\r\n        console.log(images)\r\n\r\n        const imageArray = Array.from(images)\r\n        setCurrentFace(null)\r\n        \r\n        for(let i = 0; i < imageArray.length; i++){\r\n            await processImage(imageArray[i]);\r\n            setProgress(i+1);\r\n        }\r\n\r\n        setDownloadDisabled(false)\r\n\r\n\r\n    }\r\n\r\n\r\n    const loadImage = async (image) => {\r\n        console.log(image)\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image()\r\n            img.onload = () => resolve(img)\r\n            img.onerror = reject\r\n\r\n            img.src  =  URL.createObjectURL(image)\r\n           \r\n        })\r\n        \r\n    }\r\n\r\n    const loadImageFromCanvas = async (canvas) => {\r\n        return new Promise((resolve, reject) => {\r\n            let img = new Image()\r\n            img.onload = () => resolve(img)\r\n            img.onerror = reject\r\n            img.src  =  canvas.toDataURL(\"image/png\")\r\n           \r\n        })\r\n        \r\n    }\r\n\r\n    const canvasToBlob = async (canvas) => {\r\n        return new Promise((resolve, reject) => {\r\n      \r\n            canvas.toBlob((blob) => {\r\n                resolve(blob)\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    const processImage = async (image) => {\r\n        // show image in display\r\n        const img = await loadImage(image)\r\n        console.log(img)\r\n        setCurrentImage(img)\r\n\r\n\r\n        // predict faces placements\r\n        const predictedFaceDimensions = await predictFaces(img)\r\n        console.log(predictedFaceDimensions)\r\n\r\n\r\n        for(let i = 0; i < predictedFaceDimensions.length; i++){\r\n            console.log(\"remove backgroud...\")\r\n            // crop image\r\n            await cropFace(img, predictedFaceDimensions[i])\r\n            // display cropped image\r\n            const croppedImage = await loadImageFromCanvas(canvasOne.current)\r\n     \r\n            setCurrentFace(croppedImage)\r\n\r\n            // remove background\r\n            await segmentFace(canvasOne.current)\r\n            // read image from canvas\r\n            const backgroundFreeFace = await canvasToBlob(canvasOne.current)\r\n            \r\n\r\n            console.log(image)\r\n            console.log(image.name)\r\n            backgroundFreeFace.name = `${image.name.split(\".\")[0]}-f-${i}.png`\r\n        \r\n            // add to final images\r\n            console.log(\"processed images\")\r\n            console.log(backgroundFreeFace)\r\n           \r\n\r\n            setProcessedImages(oldImages => [...oldImages, backgroundFreeFace])\r\n        }\r\n\r\n      \r\n\r\n        // render image placements over image\r\n\r\n\r\n        // cut and display face \r\n\r\n        // add image to results\r\n\r\n\r\n    }\r\n\r\n\r\n    const cropFace = async (img, predictions) => {\r\n        canvasOne.current.width = predictions.width;\r\n        canvasOne.current.height = predictions.height;\r\n\r\n        const x = predictions.x ;\r\n        const y = predictions.y ;\r\n        const width = predictions.width;\r\n        const height = predictions.height;\r\n        \r\n        const ctx = canvasOne.current.getContext(\"2d\");   \r\n        ctx.drawImage(img, x,y , width, height, 0, 0, canvasOne.current.width,  canvasOne.current.height)\r\n    }\r\n\r\n    const predictFaces = async (image) => {\r\n        const returnTensors = false; // Pass in `true` to get tensors back, rather than values.\r\n        const predictions = await blazefaceModel.estimateFaces(image, returnTensors);\r\n\r\n        const predictionDimensions = []\r\n        if (predictions.length > 0) {\r\n            for (let i = 0; i < predictions.length; i++) {\r\n                const start = predictions[i].topLeft;\r\n                const end = predictions[i].bottomRight;\r\n                const size = [end[0] - start[0], end[1] - start[1]];\r\n\r\n                const startY = Math.max(start[1] - (size[1] / 1.3), 0)\r\n                const startX = Math.max(start[0] - (size[0] / 4), 0)\r\n                    \r\n                predictionDimensions.push({\r\n                    x: startX,\r\n                    y: startY,\r\n                    width:size[0] * 1.5,\r\n                    height:size[1] * 1.7,\r\n                })\r\n            }\r\n        }\r\n        return predictionDimensions;\r\n    }\r\n\r\n\r\n\r\n    const segmentFace = async (canvas) => {\r\n        const { data:map } = await bodyPixModel.segmentPerson(canvas);\r\n        const ctx = canvas.getContext(\"2d\")\r\n        const { data:imgData } = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n       \r\n        const newImg = ctx.createImageData(canvas.width, canvas.height);\r\n        const newImgData = newImg.data;\r\n\r\n        for(let i=0; i<map.length; i++) {\r\n            //The data array stores four values for each pixel\r\n            const [r, g, b, a] = [imgData[i*4], imgData[i*4+1], imgData[i*4+2], imgData[i*4+3]];\r\n            [\r\n              newImgData[i*4],\r\n              newImgData[i*4+1],\r\n              newImgData[i*4+2],\r\n              newImgData[i*4+3]\r\n            ] = !map[i] ? [255, 255, 255, 0] : [r, g, b, a];\r\n        }\r\n\r\n\r\n        ctx.putImageData(newImg, 0, 0);\r\n  \r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"image-processor\">\r\n\r\n\r\n            <div className=\"image-processor__display\">\r\n                <div className=\"image-processor__display-container\">\r\n                    <ImageDisplay image={currentImage} />\r\n                </div>\r\n                <div className=\"image-processor__display-container\">\r\n                    <ImageDisplay image={currentFace} />\r\n                </div>\r\n            </div>\r\n\r\n            <ProgressBar progress={progress} total={images.length}/>\r\n            <button disabled={downloadDisabled} className=\"image-processor__download-btn\" onClick={onDownloadClick}>Download</button>\r\n\r\n            <div className=\"image-processor__image-overview\">\r\n                    {processedImages.map(image => {\r\n                        return (\r\n                            <div className=\"image-preview\">\r\n                              <img className=\"image-preview__img\" src={URL.createObjectURL(image)} />\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n\r\n\r\n            <canvas className=\"image-processor__canvas\" ref={canvasOne}></canvas>\r\n            <canvas className=\"image-processor__canvas\" ref={canvasTwo}></canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageProcessor","\n\nimport {useState} from \"react\"\nimport \"./styles/main.scss\"\n\n\n/*\n\n\n\n  wide progress bar\n  wide download button\n\n */\n\nimport ImageSelector from \"./components/ImageSelector\"\nimport ImageProcessor from \"./components/ImageProcessor\"\n\n\nfunction App() {\n\n\n  const [uploadedImages, setUploadedImages] = useState([])\n  const [processedImages, setProcessedImages] = useState([])\n  const [hasImages, setHasImages] = useState(false)\n\n\n\n  const onImagesChange = (images) => {\n    // change display mode\n    // set images\n\n    if(images && images.length !== 0){\n      setUploadedImages(images)\n      setHasImages(true)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <header>\n            <h1 className=\"title\">Meme Face - Image Extractor</h1>\n        </header>\n\n        <div className=\"content-area\">\n\n          {hasImages ? \n            <ImageProcessor images={uploadedImages} />\n          :\n            <ImageSelector onChange={onImagesChange}/>\n          }\n            \n\n\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}